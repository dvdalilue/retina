#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "calculator_lexer"
require_relative "calculator_ast"

class SyntacticError < RuntimeError

    def initialize(tok)
        @token = tok
    end

    def to_s
        "Syntactic error on: #{@token}"   
    end
end

class Parser < Racc::Parser

module_eval(<<'...end calculator_parser.y/module_eval...', 'calculator_parser.y', 54)

def on_error(id, token, stack)
    raise SyntacticError::new(token)
end
   
def next_token
    token = @lexer.catch_lexeme
    return [false,false] unless token
    return [token.class,token]
end
   
def parse(lexer)
    @yydebug = true
    @lexer = lexer
    @tokens = []
    ast = do_parse
    return ast
end
...end calculator_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     3,     4,     4,     6,     5,     5,     3,     3,     4,
     4,    13,     5,     5,     3,     3,     4,     4,   nil,     5,
     5,     3,   nil,     4,     9,    10,     5,     7,     8,     9,
    10,   nil,    18,     7,     8,     9,    10,     9,    10 ]

racc_action_check = [
     0,     4,     0,     4,     1,     0,     4,     5,     7,     5,
     7,     6,     5,     7,     8,     9,     8,     9,   nil,     8,
     9,    10,   nil,    10,    14,    14,    10,    12,    12,    12,
    12,   nil,    12,     2,     2,     2,     2,    15,    15 ]

racc_action_pointer = [
    -2,     4,    30,   nil,    -1,     5,    11,     6,    12,    13,
    19,   nil,    24,   nil,    19,    32,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -2,    -9,    -9,    -9,    -9,    -9,    -9,
    -9,    -3,    -9,    19,    -4,    -5,    -6,    -7,    -8 ]

racc_goto_table = [
     2,     1,   nil,   nil,    11,    12,   nil,    14,    15,    16,
    17 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2,     2,   nil,     2,     2,     2,
     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  1, 12, :_reduce_2,
  2, 12, :_reduce_3,
  3, 12, :_reduce_4,
  3, 12, :_reduce_5,
  3, 12, :_reduce_6,
  3, 12, :_reduce_7,
  3, 12, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  Digit => 2,
  Plus => 3,
  Minus => 4,
  Asterisk => 5,
  Slash => 6,
  OpenRoundBracket => 7,
  CloseRoundBracket => 8,
  :UMINUS => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"digit\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"(\"",
  "\")\"",
  "UMINUS",
  "$start",
  "Calculator",
  "Expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'calculator_parser.y', 24)
  def _reduce_1(val, _values, result)
     result = val[0]                             
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 27)
  def _reduce_2(val, _values, result)
     result = Number.new(val[0])                 
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 28)
  def _reduce_3(val, _values, result)
     result = UnaryMinus.new(val[1])             
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 29)
  def _reduce_4(val, _values, result)
     result = Addition.new(val[0], val[2])       
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 30)
  def _reduce_5(val, _values, result)
     result = Subtraction.new(val[0], val[2])    
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 31)
  def _reduce_6(val, _values, result)
     result = Multiplication.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 32)
  def _reduce_7(val, _values, result)
     result = Division.new(val[0], val[2])       
    result
  end
.,.,

module_eval(<<'.,.,', 'calculator_parser.y', 33)
  def _reduce_8(val, _values, result)
     result = val[1]                             
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
